/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.pay.generated.request.paymentTransactions

import cloud.pace.sdk.api.pay.PayAPI
import cloud.pace.sdk.api.pay.generated.model.Discount
import cloud.pace.sdk.api.pay.generated.model.Transaction
import cloud.pace.sdk.api.request.BaseRequest
import com.google.gson.annotations.SerializedName
import com.squareup.moshi.Json
import retrofit2.Call
import retrofit2.http.GET
import retrofit2.http.HeaderMap
import retrofit2.http.Path
import retrofit2.http.Query

object GetTransactionAPI {

    interface GetTransactionService {
        /* Get a transaction */
        /* Endpoint for fetching information about a single transaction. Only completed transactions can be returned.
If `update=longPolling` is set, the following applies:
In case the transaction is not yet completed the call may be delayed 20s until a response can be given. If the client got this URL as a response to the Pre Auth process the call is save to retry. In case the transaction was canceled by the client an answer will still be delayed but always returns `404`, therefore the client has to remember, that the transaction was canceled.
 */
        @GET("transactions/{transactionId}")
        fun getTransaction(
            @HeaderMap headers: Map<String, String>,
            /* transaction ID. */
            @Path("transactionId") transactionId: String,
            /* Specify this parameter if you want to enable long-polling on this endpoint. Long-polling means that the endpoint will wait a fixed set of seconds (20s)
before returning the result.
 */
            @Query("update") update: Update? = null
        ): Call<Transaction>
    }

    /* Specify this parameter if you want to enable long-polling on this endpoint. Long-polling means that the endpoint will wait a fixed set of seconds (20s)
    before returning the result.
     */
    enum class Update(val value: String) {
        @SerializedName("longPolling")
        @Json(name = "longPolling")
        LONGPOLLING("longPolling")
    }

    open class Request : BaseRequest() {

        fun getTransaction(
            transactionId: String,
            update: Update? = null,
            readTimeout: Long? = null,
            additionalHeaders: Map<String, String>? = null,
            additionalParameters: Map<String, String>? = null
        ): Call<Transaction> {
            val resources = listOf(Discount::class.java)
            val headers = headers(true, "application/vnd.api+json", "application/vnd.api+json", additionalHeaders)

            return retrofit(PayAPI.baseUrl, additionalParameters, readTimeout, resources)
                .create(GetTransactionService::class.java)
                .getTransaction(
                    headers,
                    transactionId,
                    update
                )
        }
    }

    fun PayAPI.PaymentTransactionsAPI.getTransaction(
        transactionId: String,
        update: Update? = null,
        readTimeout: Long? = null,
        additionalHeaders: Map<String, String>? = null,
        additionalParameters: Map<String, String>? = null
    ) = Request().getTransaction(
        transactionId,
        update,
        readTimeout,
        additionalHeaders,
        additionalParameters
    )
}
