/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.user.generated.request.credentials

import cloud.pace.sdk.api.request.BaseRequest
import cloud.pace.sdk.api.user.UserAPI
import cloud.pace.sdk.api.user.generated.model.*
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.http.*

object CheckUserPasswordAPI {

    interface CheckUserPasswordService {
        /* Check if user has a Password */
        /* This call can be used to check if the user password is set.
 */
        @GET("user/password")
        fun checkUserPassword(
            @HeaderMap headers: Map<String, String>,
            /* Timeout in seconds, wait until password is set (long polling) */
            @Query("timeout") timeout: Int? = null
        ): Call<ResponseBody>
    }

    open class Request : BaseRequest() {

        fun checkUserPassword(
            timeout: Int? = null,
            readTimeout: Long? = null,
            additionalHeaders: Map<String, String>? = null,
            additionalParameters: Map<String, String>? = null
        ): Call<ResponseBody> {
            val headers = headers(true, "application/json", "application/json", additionalHeaders)

            return retrofit(UserAPI.baseUrl, additionalParameters, readTimeout)
                .create(CheckUserPasswordService::class.java)
                .checkUserPassword(
                    headers,
                    timeout
                )
        }
    }

    fun UserAPI.CredentialsAPI.checkUserPassword(
        timeout: Int? = null,
        readTimeout: Long? = null,
        additionalHeaders: Map<String, String>? = null,
        additionalParameters: Map<String, String>? = null
    ) = Request().checkUserPassword(
        timeout,
        readTimeout,
        additionalHeaders,
        additionalParameters
    )
}
