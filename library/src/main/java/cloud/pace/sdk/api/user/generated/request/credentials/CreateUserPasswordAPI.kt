/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.user.generated.request.credentials

import cloud.pace.sdk.api.request.BaseRequest
import cloud.pace.sdk.api.user.UserAPI
import cloud.pace.sdk.api.user.generated.model.*
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.http.*

object CreateUserPasswordAPI {

    interface CreateUserPasswordService {
        /* Request to set a password */
        /* This process can only set a password if the user doesn't already have one. The user will receive an email to set the password. This process enabled for for 24h. The request can be issued multiple times. In case the user already has a password set `409` is returned.
 */
        @PUT("user/password")
        fun createUserPassword(
            @HeaderMap headers: Map<String, String>,
        ): Call<ResponseBody>
    }

    open class Request : BaseRequest() {

        fun createUserPassword(
            readTimeout: Long? = null,
            additionalHeaders: Map<String, String>? = null,
            additionalParameters: Map<String, String>? = null
        ): Call<ResponseBody> {
            val headers = headers(true, "application/json", "application/json", additionalHeaders)

            return retrofit(UserAPI.baseUrl, additionalParameters, readTimeout)
                .create(CreateUserPasswordService::class.java)
                .createUserPassword(
                    headers
                )
        }
    }

    fun UserAPI.CredentialsAPI.createUserPassword(
        readTimeout: Long? = null,
        additionalHeaders: Map<String, String>? = null,
        additionalParameters: Map<String, String>? = null
    ) = Request().createUserPassword(
        readTimeout,
        additionalHeaders,
        additionalParameters
    )
}
