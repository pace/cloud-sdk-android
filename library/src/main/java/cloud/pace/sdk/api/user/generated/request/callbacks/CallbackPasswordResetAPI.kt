/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.user.generated.request.callbacks

import cloud.pace.sdk.api.request.BaseRequest
import cloud.pace.sdk.api.user.UserAPI
import cloud.pace.sdk.api.user.generated.model.*
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.http.*

object CallbackPasswordResetAPI {

    interface CallbackPasswordResetService {
        /* Password reset */
        /* During a password reset the user is only able to provide the HAVE
using the email address. In order to retain the user data the user
has to provide a second factor, either HAVE or KNOW.
The `prove` can be done with *PIN* (KNOW) or the *device OTP* (HAVE).
This callback is called before the password of the user is reset.
If the user is able to provide his/her `prove` correctly the data of
the user remain untouched. In case the `prove` is in correctly provided
for more than 3 times, the critical data e.g. payment data of the
user is deleted in order to prevent theft.
* `404` is returned in case the user has no `prove` defined.
* `410` is returned in case the `prove` didn't match multiple times,
  the user data will be deleted for safety reasons.
* `422` is returned in case the the `prove` is incorrect.
 */
        @POST("callbacks/password-reset")
        fun callbackPasswordReset(
            @HeaderMap headers: Map<String, String>,
            @retrofit2.http.Body body: UserPIN
        ): Call<ResponseBody>
    }

    open class Request : BaseRequest() {

        fun callbackPasswordReset(
            body: UserPIN,
            readTimeout: Long? = null,
            additionalHeaders: Map<String, String>? = null,
            additionalParameters: Map<String, String>? = null
        ): Call<ResponseBody> {
            val headers = headers(true, "application/vnd.api+json", "application/vnd.api+json", additionalHeaders)

            return retrofit(UserAPI.baseUrl, additionalParameters, readTimeout)
                .create(CallbackPasswordResetService::class.java)
                .callbackPasswordReset(
                    headers,
                    body
                )
        }
    }

    fun UserAPI.CallbacksAPI.callbackPasswordReset(
        body: UserPIN,
        readTimeout: Long? = null,
        additionalHeaders: Map<String, String>? = null,
        additionalParameters: Map<String, String>? = null
    ) = Request().callbackPasswordReset(
        body,
        readTimeout,
        additionalHeaders,
        additionalParameters
    )
}
