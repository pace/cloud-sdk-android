/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.pay.generated.model

import com.google.gson.annotations.SerializedName
import com.squareup.moshi.Json
import moe.banana.jsonapi2.HasMany
import moe.banana.jsonapi2.HasOne
import moe.banana.jsonapi2.JsonApi
import moe.banana.jsonapi2.Resource
import java.util.Date

@JsonApi(type = "paymentMethod")
class PaymentMethod : Resource() {

    var links: Links? = null
    var meta: Meta? = null

    /* Customer chosen alias for the payment method */
    var alias: String? = null

    /* URL for the user to call in order to approve this payment method. */
    var approvalURL: String? = null

    /* Expiry date of the payment method. If empty or not present the payment method does not have an expiry date. */
    var expiry: Date? = null
    var identificationString: String? = null

    /* Implicit (`true`) payment methods are read-only and cannot be deleted, e.g., ApplePay */
    var implicit: Boolean? = null

    /* one of sepa, creditcard, paypal, paydirekt, dkv, applepay, ... */
    var kind: String? = null

    /* Managed (`true`) payment methods are read-only and cannot be deleted other than by the client (oauth/oidc) that created them. */
    var managed: Boolean? = null
    var mandatoryAuthorisationAttributes: List<MandatoryAuthorisationAttributes>? = null

    /* Identifies if the payment method is a PACE payment method (`true`) or a broker method (`false`) */
    var pacePay: Boolean? = null

    /* The desired status for a payment method is `verified`, this means the method is ready to use.
A payment method that has the status `created` has yet to be verified. This is the case for payment methods,
which have an asynchronous verification process, e.g., paydirekt (waiting for an email).
 */
    var status: Status? = null

    /* indicates if the payment method kind requires two factors later on */
    var twoFactor: Boolean? = null

    /* PACE resource name(s) to payment method vendor */
    var vendorPRN: String? = null

    /* The desired status for a payment method is `verified`, this means the method is ready to use.
    A payment method that has the status `created` has yet to be verified. This is the case for payment methods,
    which have an asynchronous verification process, e.g., paydirekt (waiting for an email).
     */
    enum class Status(val value: String) {
        @SerializedName("created")
        @Json(name = "created")
        CREATED("created"),

        @SerializedName("verified")
        @Json(name = "verified")
        VERIFIED("verified"),

        @SerializedName("pending")
        @Json(name = "pending")
        PENDING("pending"),

        @SerializedName("unacceptable")
        @Json(name = "unacceptable")
        UNACCEPTABLE("unacceptable")
    }

    /* Mandatory transaction attribute validator */
    class MandatoryAuthorisationAttributes {

        var maxLength: Int? = null
        var name: String? = null
        var regex: String? = null
    }

    private var paymentMethodKind: HasOne<PaymentMethodKind> = HasOne()
    fun getPaymentMethodKind() = paymentMethodKind.get(document)

    private var paymentMethodVendor: HasOne<PaymentMethodVendor> = HasOne()
    fun getPaymentMethodVendor() = paymentMethodVendor.get(document)

    private var paymentTokens: HasMany<PaymentToken> = HasMany()
    fun getPaymentTokens() = paymentTokens.get(document)

    class Links {

        var authorize: Authorize? = null

        class Authorize {

            var href: String? = null
            var meta: Meta? = null

            class Meta {

                var authFlow: AuthFlow? = null

                enum class AuthFlow(val value: String) {
                    @SerializedName("token-provided")
                    @Json(name = "token-provided")
                    TOKENPROVIDED("token-provided"),

                    @SerializedName("method-onboarded")
                    @Json(name = "method-onboarded")
                    METHODONBOARDED("method-onboarded")
                }
            }
        }
    }

    class Meta {

        /* Merchant name if the request was made in a way that a merchant name can be determined. For example if requesting payment methods for a specific gas station, it is the merchant name at that gas station. */
        var merchantName: String? = null
    }
}
