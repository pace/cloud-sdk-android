/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.user.generated.request.terms

import cloud.pace.sdk.api.request.BaseRequest
import cloud.pace.sdk.api.user.UserAPI
import cloud.pace.sdk.api.user.generated.model.*
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.http.*

object AcceptTermsAPI {

    interface AcceptTermsService {
        /* Accepts the terms presented under the UUID */
        /* Accepts the terms using the user that is linked in the token.
This endpoint must only be called as a reaction of direct user
consent with the terms of service.
 */
        @POST("terms/{termsId}/accept")
        fun acceptTerms(
            @HeaderMap headers: Map<String, String>,
            @Path("termsId") termsId: String? = null
        ): Call<ResponseBody>
    }

    open class Request : BaseRequest() {

        fun acceptTerms(
            termsId: String? = null,
            readTimeout: Long? = null,
            additionalHeaders: Map<String, String>? = null,
            additionalParameters: Map<String, String>? = null
        ): Call<ResponseBody> {
            val headers = headers(true, "application/json", "application/json", additionalHeaders)

            return retrofit(UserAPI.baseUrl, additionalParameters, readTimeout)
                .create(AcceptTermsService::class.java)
                .acceptTerms(
                    headers,
                    termsId
                )
        }
    }

    fun UserAPI.TermsAPI.acceptTerms(
        termsId: String? = null,
        readTimeout: Long? = null,
        additionalHeaders: Map<String, String>? = null,
        additionalParameters: Map<String, String>? = null
    ) = Request().acceptTerms(
        termsId,
        readTimeout,
        additionalHeaders,
        additionalParameters
    )
}
