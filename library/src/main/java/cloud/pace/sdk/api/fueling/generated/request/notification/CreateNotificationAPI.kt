/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.fueling.generated.request.notification

import cloud.pace.sdk.api.fueling.FuelingAPI
import cloud.pace.sdk.api.request.BaseRequest
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.http.HeaderMap
import retrofit2.http.POST
import retrofit2.http.Query

object CreateNotificationAPI {

    interface CreateNotificationService {
        /* Deliver notification
 */
        /* Delivers a notification from a partner system to the PACE fueling system.
  * `406` is returned in case the vendor format is not unknown
  * `400` is returned in case the vendor format is not valid when comparing against the provided input (request body)
 */
        @POST("notifications")
        fun createNotification(
            @HeaderMap headers: Map<String, String>,
            /* Name of the vendor providing the notification. This will enforce a certain format depending on the vendor. */
            @Query("vendor") vendor: String? = null
        ): Call<ResponseBody>
    }

    open class Request : BaseRequest() {

        fun createNotification(
            vendor: String? = null,
            readTimeout: Long? = null,
            additionalHeaders: Map<String, String>? = null,
            additionalParameters: Map<String, String>? = null
        ): Call<ResponseBody> {
            val headers = headers(true, "application/json", "application/json", additionalHeaders)

            return retrofit(FuelingAPI.baseUrl, additionalParameters, readTimeout)
                .create(CreateNotificationService::class.java)
                .createNotification(
                    headers,
                    vendor
                )
        }
    }

    fun FuelingAPI.NotificationAPI.createNotification(
        vendor: String? = null,
        readTimeout: Long? = null,
        additionalHeaders: Map<String, String>? = null,
        additionalParameters: Map<String, String>? = null
    ) = Request().createNotification(
        vendor,
        readTimeout,
        additionalHeaders,
        additionalParameters
    )
}
