/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.user.generated.request.federatedIdentity

import cloud.pace.sdk.api.request.BaseRequest
import cloud.pace.sdk.api.user.UserAPI
import cloud.pace.sdk.api.user.generated.model.*
import retrofit2.Call
import retrofit2.http.*

object GrantFederatedTokenAPI {

    interface GrantFederatedTokenService {
        /* Provide a token for a federated identity provider */
        /* Provides a token for the given identity provider, if the user has a valid one. Token grant is a request as per OAuth2 specification
 */
        @POST("federated-identities/{identityProvider}/token")
        fun grantFederatedToken(
            @HeaderMap headers: Map<String, String>,
            @Path("identityProvider") identityProvider: String? = null
        ): Call<AccessToken>
    }

    open class Request : BaseRequest() {

        fun grantFederatedToken(
            identityProvider: String? = null,
            readTimeout: Long? = null,
            additionalHeaders: Map<String, String>? = null,
            additionalParameters: Map<String, String>? = null
        ): Call<AccessToken> {
            val headers = headers(false, "application/json", "application/json", additionalHeaders)

            return retrofit(UserAPI.baseUrl, additionalParameters, readTimeout)
                .create(GrantFederatedTokenService::class.java)
                .grantFederatedToken(
                    headers,
                    identityProvider
                )
        }
    }

    fun UserAPI.FederatedIdentityAPI.grantFederatedToken(
        identityProvider: String? = null,
        readTimeout: Long? = null,
        additionalHeaders: Map<String, String>? = null,
        additionalParameters: Map<String, String>? = null
    ) = Request().grantFederatedToken(
        identityProvider,
        readTimeout,
        additionalHeaders,
        additionalParameters
    )
}
