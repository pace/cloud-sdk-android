/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.user.generated.request.attributes

import cloud.pace.sdk.api.request.BaseRequest
import cloud.pace.sdk.api.user.UserAPI
import cloud.pace.sdk.api.user.generated.model.*
import retrofit2.Call
import retrofit2.http.*

object GetUserAttributesAPI {

    interface GetUserAttributesService {
        /* Get the users keycloak attributes */
        /* Requests a list of attributes as set in keycloak, assuming the client has
the required scope.
 */
        @GET("attributes")
        fun getUserAttributes(
            @HeaderMap headers: Map<String, String>,
        ): Call<Map<String, Any>>
    }

    open class Request : BaseRequest() {

        fun getUserAttributes(
            readTimeout: Long? = null,
            additionalHeaders: Map<String, String>? = null,
            additionalParameters: Map<String, String>? = null
        ): Call<Map<String, Any>> {
            val headers = headers(true, "application/vnd.api+json", "application/vnd.api+json", additionalHeaders)

            return retrofit(UserAPI.baseUrl, additionalParameters, readTimeout)
                .create(GetUserAttributesService::class.java)
                .getUserAttributes(
                    headers
                )
        }
    }

    fun UserAPI.AttributesAPI.getUserAttributes(
        readTimeout: Long? = null,
        additionalHeaders: Map<String, String>? = null,
        additionalParameters: Map<String, String>? = null
    ) = Request().getUserAttributes(
        readTimeout,
        additionalHeaders,
        additionalParameters
    )
}
