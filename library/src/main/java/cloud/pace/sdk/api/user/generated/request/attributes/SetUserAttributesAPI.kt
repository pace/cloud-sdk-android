/*
 * PLEASE DO NOT EDIT!
 *
 * Generated by SwagGen with Kotlin template.
 * https://github.com/pace/SwagGen
 */

package cloud.pace.sdk.api.user.generated.request.attributes

import cloud.pace.sdk.api.request.BaseRequest
import cloud.pace.sdk.api.user.UserAPI
import cloud.pace.sdk.api.user.generated.model.*
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.http.*

object SetUserAttributesAPI {

    interface SetUserAttributesService {
        /* Update the users attributes */
        /* Updates the attributes of the user identified by the given token.
Assuming the client has the required scope, it will update the attributes
with any new keys, updating conflicting keys and leaving the rest untouched.
 */
        @JvmSuppressWildcards
        @PUT("attributes")
        fun setUserAttributes(
            @HeaderMap headers: Map<String, String>,
            @retrofit2.http.Body body: Map<String, Any>
        ): Call<ResponseBody>
    }

    open class Request : BaseRequest() {

        fun setUserAttributes(
            body: Map<String, Any>,
            readTimeout: Long? = null,
            additionalHeaders: Map<String, String>? = null,
            additionalParameters: Map<String, String>? = null
        ): Call<ResponseBody> {
            val headers = headers(true, "application/json", "application/json", additionalHeaders)

            return retrofit(UserAPI.baseUrl, additionalParameters, readTimeout)
                .create(SetUserAttributesService::class.java)
                .setUserAttributes(
                    headers,
                    body
                )
        }
    }

    fun UserAPI.AttributesAPI.setUserAttributes(
        body: Map<String, Any>,
        readTimeout: Long? = null,
        additionalHeaders: Map<String, String>? = null,
        additionalParameters: Map<String, String>? = null
    ) = Request().setUserAttributes(
        body,
        readTimeout,
        additionalHeaders,
        additionalParameters
    )
}
