//
// Generated by KotlinPoet:
// https://github.com/square/kotlinpoet
//
// Please do not edit!
//
package car.pace.cofu.features.analytics

import android.os.Bundle
import androidx.core.os.bundleOf
import kotlin.Boolean
import kotlin.String

public open class AnalyticEvent(
    public val key: String,
    public var parameters: Bundle? = null
)

/**
 * Event to track the successful installation of the application and initialisation of the analytics
 * framework.
 */
public object AppInstalled : AnalyticEvent("app_installed")

/**
 * Event to track that the app was opened (send every time).
 */
public object AppOpened : AnalyticEvent("app_opened")

/**
 * Event to track the sign in (includes registrations & sign-ups) of a user.
 */
public object UserSignedIn : AnalyticEvent("user_signed_in")

/**
 * Event to track if the user started the boarding of a card.
 */
public object CardBoardingStarted : AnalyticEvent("card_boarding_started")

/**
 * Event to track if the user has used the app close to a station which is enabled for this
 * application.
 */
public object StationNearby : AnalyticEvent("station_nearby")

/**
 * Event to track if the user initiated the fueling process at a station.
 */
public object FuelingStarted : AnalyticEvent("fueling_started")

/**
 * Event to track if the user canceled the fueling process.
 */
public object FuelingCanceled : AnalyticEvent("fueling_canceled")

/**
 * Event to track the successful boarding of a card, including the type of the card.
 */
public class CardBoardingDone(
    type: String?
) : AnalyticEvent(key, bundleOf("type" to type)) {
    public companion object {
        public const val key: String = "card_boarding_done"
    }
}

/**
 * Event to track if the user requested a navigation and was successfully forwarded to a routing
 * application (apple maps / google maps).
 */
public object StationNavigationUsed : AnalyticEvent("station_navigation_used")

/**
 * Event to track if the fueling process was finished.
 */
public class FuelingEnded(
    success: Boolean?
) : AnalyticEvent(key, bundleOf("success" to success)) {
    public companion object {
        public const val key: String = "fueling_ended"
    }
}
